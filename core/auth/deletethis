from flask import Blueprint, render_template, request, redirect, url_for, flash
from flask_login import login_user, logout_user, login_required
from werkzeug.security import check_password_hash
from app.core.forms import LoginForm, RegisterForm
from app.core.models import User
from app.core.utils import flash_errors

auth = Blueprint(name='auth', import_name=__name__, static_folder='static', static_url_path='static',
                 template_folder='templates')


@auth.route('/login', methods=['GET', 'POST'])
def login():
    return render_template('auth/login.html', form=LoginForm())


@auth.route('/register', methods=['GET', 'POST'])
def register():
    return render_template('auth/register.html', form=RegisterForm())


@auth.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('core.index'))


@auth.route('/login', methods=['POST'])
def login_post():
    form = LoginForm(request.form)
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user is not None and check_password_hash(user.password, form.password.data):
            login_user(user)
            return redirect(url_for('core.index'))

    flash_errors(form)
    return redirect(url_for('auth.login'))


@auth.route('/register', methods=['POST'])
def register_post():
    form = RegisterForm(request.form)
    if form.validate_on_submit():
        user = User(email=form.email.data, password=form.password.data)
        db.session.add(user)
        db.session.commit()
        login_user(user)
        return redirect(url_for('core.index'))
    flash_errors(form)
    return redirect(url_for('auth.register'))


@auth.route('/confirm/<token>')
@login_required
def confirm(token):
    if current_user.confirmed:
        return redirect(url_for('core.index'))
    if current_user.confirm(token):
        flash('You have confirmed your account. Thanks!')
    else:
        flash('The confirmation link is invalid or has expired.')
    return redirect(url_for('core.index'))


@auth.before_app_request
def before_request():
    if current_user.is_authenticated \
            and not current_user.confirmed \
            and request.endpoint[:5] != 'auth.' \
            and request.endpoint != 'static':
        return redirect(url_for('auth.unconfirmed'))


@auth.route('/unconfirmed')
def unconfirmed():
    if current_user.is_anonymous or current_user.confirmed:
        return redirect(url_for('core.index'))
    return render_template('auth/unconfirmed.html')


@auth.route('/confirm')
@login_required
def resend_confirmation():
    token = current_user.generate_confirmation_token()
    send_email(current_user.email, 'Confirm Your Account',
               'auth/email/confirm', user=current_user, token=token)
    flash('A new confirmation email has been sent to you by email.')
    return redirect(url_for('core.index'))


@auth.route('/change-password', methods=['GET', 'POST'])
@login_required
def change_password():
    form = ChangePasswordForm()
    if form.validate_on_submit():
        if current_user.verify_password(form.old_password.data):
            current_user.password = form.password.data
            db.session.add(current_user)
            flash('Your password has been updated.')
            return redirect(url_for('core.index'))
        else:
            flash('Invalid password.')
    return render_template("auth/change_password.html", form=form)


@auth.route('/reset', methods=['GET', 'POST'])
def password_reset_request():
    if not current_user.is_anonymous:
        return redirect(url_for('core.index'))
    form = PasswordResetRequestForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user:
            token = user.generate_reset_token()
            send_email(user.email, 'Reset Your Password',
                       'auth/email/reset_password',
                       user=user, token=token,
                       next=request.args.get('next'))
        flash('An email with instructions to reset your password has been '
              'sent to you.')
        return redirect(url_for('auth.login'))
    return render_template('auth/reset_password.html', form=form)


@auth.route('/reset/<token>', methods=['GET', 'POST'])
def password_reset(token):
    if not current_user.is_anonymous:
        return redirect(url_for('core.index'))
    form = PasswordResetForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user is None:
            return redirect(url_for('core.index'))
        if user.reset_password(token, form.password.data):
            flash('Your password has been updated.')
            return redirect(url_for('auth.login'))
        else:
            return redirect(url_for('core.index'))
    return render_template('auth/reset_password.html', form=form)


@auth.route('/change-email', methods=['GET', 'POST'])
@login_required
def change_email_request():
    form = ChangeEmailForm()
    if form.validate_on_submit():
        if current_user.verify_password(form.password.data):
            new_email = form.email.data
            token = current_user.generate_email_change_token(new_email)
            send_email(new_email, 'Confirm your email address',
                       'auth/email/change_email',
                       user=current_user, token=token)
            flash('An email with instructions to confirm your new email '
                  'address has been sent to you.')
            return redirect(url_for('core.index'))
        else:
            flash('Invalid email or password.')
    return render_template("auth/change_email.html", form=form)


@auth.route('/change-email/<token>')
@login_required
def change_email(token):
    if current_user.change_email(token):
        flash('Your email address has been updated.')
    else:
        flash('Invalid request.')
    return redirect(url_for('core.index'))


@auth.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('core.index'))


@auth.route('/user/<username>')
@login_required
def user(username):
    user = User.query.filter_by(username=username).first_or_404()
    page = request.args.get('page', 1, type=int)
    posts = user.posts.order_by(Post.timestamp.desc()).paginate(
        page, app.config['POSTS_PER_PAGE'], False)
    next_url = url_for('auth.user', username=user.username, page=posts.next_num) \
        if posts.has_next else None
    prev_url = url_for('auth.user', username=user.username, page=posts.prev_num) \
        if posts.has_prev else None
    return render_template('auth/user.html', user=user, posts=posts.items,
                           next_url=next_url, prev_url=prev_url)


@auth.route('/edit_profile', methods=['GET', 'POST'])
@login_required
def edit_profile():
    form = EditProfileForm(current_user.username)
    if form.validate_on_submit():
        current_user.username = form.username.data
        current_user.about_me = form.about_me.data
        db.session.add(current_user)
        flash('Your changes have been saved.')
        return redirect(url_for('auth.user', username=current_user.username))
    elif request.method == 'GET':
        form.username.data = current_user.username
        form.about_me.data = current_user.about_me
    return render_template('auth/edit_profile.html', title='Edit Profile',
                           form=form)


@auth.route('/follow/<username>')
@login_required
def follow(username):
    user = User.query.filter_by(username=username).first()
    if user is None:
        flash('User {} not found.'.format(username))
        return redirect(url_for('core.index'))
    if user == current_user:
        flash('You cannot follow yourself!')
        return redirect(url_for('auth.user', username=username))
    current_user.follow(user)
    db.session.commit()
    flash('You are following {}!'.format(username))
    return redirect(url_for('auth.user', username=username))


@auth.route('/unfollow/<username>')
@login_required
def unfollow(username):
    user = User.query.filter_by(username=username).first()
    if user is None:
        flash('User {} not found.'.format(username))
        return redirect(url_for('core.index'))
    if user == current_user:
        flash('You cannot unfollow yourself!')
        return redirect(url_for('auth.user', username=username))
    current_user.unfollow(user)
    db.session.commit()
    flash('You are not following {}.'.format(username))
    return redirect(url_for('auth.user', username=username))


@auth.route('/explore')
@login_required
def explore():
    page = request.args.get('page', 1, type=int)
    posts = Post.query.order_by(Post.timestamp.desc()).paginate(
        page, app.config['POSTS_PER_PAGE'], False)
    next_url = url_for('auth.explore', page=posts.next_num) \
        if posts.has_next else None
    prev_url = url_for('auth.explore', page=posts.prev_num) \
        if posts.has_prev else None
    return render_template("auth/explore.html", title='Explore', posts=posts.items,
                           next_url=next_url, prev_url=prev_url)


@auth.route('/reset', methods=['GET', 'POST'])
def reset_request():
    if not current_user.is_anonymous:
        return redirect(url_for('core.index'))
    form = RequestResetForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user:
            token = user.generate_reset_token()
            send_email(user.email, 'Reset Your Password',
                       'auth/email/reset_password',
                       user=user, token=token,
                       next=request.args.get('next'))
        flash('An email with instructions to reset your password has been '
              'sent to you.')
        return redirect(url_for('auth.login'))
    return render_template('auth/reset_request.html', title='Reset Password', form=form)


@auth.route('/reset/<token>', methods=['GET', 'POST'])
def reset_token(token):
    if not current_user.is_anonymous:
        return redirect(url_for('core.index'))
    form = ResetPasswordForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user is None:
            return redirect(url_for('core.index'))
        if user.reset_password(token, form.password.data):
            flash('Your password has been updated.')
            return redirect(url_for('auth.login'))
        else:
            return redirect(url_for('core.index'))
    return render_template('auth/reset_token.html', title='Reset Password', form=form)


@auth.route('/change-password', methods=['GET', 'POST'])
@login_required
def change_password():
    form = ChangePasswordForm()
    if form.validate_on_submit():
        if current_user.verify_password(form.old_password.data):
            current_user.password = form.password.data
            db.session.add(current_user)
            flash('Your password has been updated.')
            return redirect(url_for('auth.user', username=current_user.username))
        else:
            flash('Invalid password.')
    return render_template("auth/change_password.html", form=form)


@auth.route('/change-email', methods=['GET', 'POST'])
@login_required
def change_email_request():
    form = ChangeEmailForm()
    if form.validate_on_submit():
        if current_user.verify_password(form.password.data):
            new_email = form.email.data
            token = current_user.generate_email_change_token(new_email)
            send_email(new_email, 'Confirm your email address',
                       'auth/email/change_email',
                       user=current_user, token=token)
            flash('An email with instructions to confirm your new email '
                  'address has been sent to you.')
            return redirect(url_for('core.index'))
        else:
            flash('Invalid email or password.')
    return render_template("auth/change_email.html", form=form)


@auth.route('/change-email/<token>')
@login_required
def change_email(token):
    if current_user.change_email(token):
        flash('Your email address has been updated.')
    else:
        flash('Invalid request.')
    return redirect(url_for('core.index'))


@auth.route('/admin')
@login_required
def admin():
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    return render_template("auth/admin.html", title='Admin')


@auth.route('/admin/users')
@login_required
def admin_users():
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    page = request.args.get('page', 1, type=int)
    users = User.query.order_by(User.username.asc()).paginate(
        page, app.config['USERS_PER_PAGE'], False)

    next_url = url_for('auth.admin_users', page=users.next_num) \
        if users.has_next else None
    prev_url = url_for('auth.admin_users', page=users.prev_num) \
        if users.has_prev else None
    return render_template("auth/admin_users.html", title='Admin - Users',
                           users=users.items, next_url=next_url, prev_url=prev_url)


@auth.route('/admin/users/<username>')
@login_required
def admin_user(username):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    return render_template("auth/admin_user.html", title='Admin - User', user=user)


@auth.route('/admin/users/<username>/change-password', methods=['GET', 'POST'])
@login_required
def admin_user_change_password(username):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    form = ChangePasswordForm()
    if form.validate_on_submit():
        if user.verify_password(form.password.data):
            user.password = form.password.data
            db.session.add(user)
            flash('Your password has been updated.')
            return redirect(url_for('auth.admin_user', username=user.username))
        else:
            flash('Invalid password.')
    return render_template("auth/admin_user_change_password.html", title='Admin - Change Password', form=form)


@auth.route('/admin/users/<username>/change-email', methods=['GET', 'POST'])
@login_required
def admin_user_change_email(username):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    form = ChangeEmailForm()
    if form.validate_on_submit():
        if user.verify_password(form.password.data):
            new_email = form.email.data
            token = user.generate_email_change_token(new_email)
            send_email(new_email, 'Confirm your email address',
                       'auth/email/change_email',
                       user=user, token=token)
            flash('An email with instructions to confirm your new email '
                  'address has been sent to you.')
            return redirect(url_for('auth.admin_user', username=user.username))
        else:
            flash('Invalid email or password.')
    return render_template("auth/admin_user_change_email.html", title='Admin - Change Email', form=form)


@auth.route('/admin/users/<username>/change-email/<token>')
@login_required
def admin_user_change_email_token(username, token):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    if user.change_email(token):
        flash('Your email address has been updated.')
    else:
        flash('Invalid request.')
    return redirect(url_for('auth.admin_user', username=user.username))


@auth.route('/admin/users/<username>/delete', methods=['GET', 'POST'])
@login_required
def admin_user_delete(username):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    form = DeleteForm()
    if form.validate_on_submit():
        if user.verify_password(form.password.data):
            db.session.delete(user)
            db.session.commit()
            flash('The user has been deleted.')
            return redirect(url_for('auth.admin_users'))
        else:
            flash('Invalid password.')
    return render_template("auth/admin_user_delete.html", title='Admin - Delete User', form=form)


@auth.route('/admin/users/<username>/delete/<token>')
@login_required
def admin_user_delete_token(username, token):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    if user.change_email(token):
        db.session.delete(user)
        db.session.commit()
        flash('The user has been deleted.')
    else:
        flash('Invalid request.')
    return redirect(url_for('auth.admin_users'))


@auth.route('/admin/users/<username>/reset', methods=['GET', 'POST'])
@login_required
def admin_user_reset(username):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    form = ResetPasswordForm()
    if form.validate_on_submit():
        if user.verify_password(form.password.data):
            user.password = form.password.data
            db.session.add(user)
            flash('Your password has been reset.')
            return redirect(url_for('auth.admin_user', username=user.username))
        else:
            flash('Invalid password.')
    return render_template("auth/admin_user_reset.html", title='Admin - Reset Password', form=form)


@auth.route('/admin/users/<username>/reset/<token>', methods=['GET', 'POST'])
@login_required
def admin_user_reset_token(username, token):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    if user.change_email(token):
        flash('Your email address has been updated.')
    else:
        flash('Invalid request.')
    return redirect(url_for('auth.admin_user', username=user.username))


@auth.route('/admin/users/<username>/change-password', methods=['GET', 'POST'])
@login_required
def admin_user_change_password(username):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    form = ChangePasswordForm()
    if form.validate_on_submit():
        if user.verify_password(form.old_password.data):
            user.password = form.password.data
            db.session.add(user)
            flash('Your password has been updated.')
            return redirect(url_for('auth.admin_user', username=user.username))
        else:
            flash('Invalid password.')
    return render_template("auth/admin_user_change_password.html", title='Admin - Change Password', form=form)


@auth.route('/admin/users/<username>/change-password/<token>', methods=['GET', 'POST'])
@login_required
def admin_user_change_password_token(username, token):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    if user.change_password(token):
        flash('Your password has been updated.')
    else:
        flash('Invalid request.')
    return redirect(url_for('auth.admin_user', username=user.username))


@auth.route('/admin/users/<username>/change-email', methods=['GET', 'POST'])
@login_required
def admin_user_change_email(username):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    form = ChangeEmailForm()
    if form.validate_on_submit():
        if user.verify_password(form.password.data):
            user.email = form.email.data
            user.username = form.username.data
            db.session.add(user)
            flash('Your email address has been updated.')
            return redirect(url_for('auth.admin_user', username=user.username))
        else:
            flash('Invalid password.')

    return render_template("auth/admin_user_change_email.html", title='Admin - Change Email', form=form)


@auth.route('/admin/users/<username>/change-email/<token>', methods=['GET', 'POST'])
@login_required
def admin_user_change_email_token(username, token):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    if user.change_email(token):
        flash('Your email address has been updated.')
    else:
        flash('Invalid request.')
    return redirect(url_for('auth.admin_user', username=user.username))


@auth.route('/admin/users/<username>/change-username', methods=['GET', 'POST'])
@login_required
def admin_user_change_username(username):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    form = ChangeUsernameForm()
    if form.validate_on_submit():
        if user.verify_password(form.password.data):
            user.username = form.username.data
            db.session.add(user)
            flash('Your username has been updated.')
            return redirect(url_for('auth.admin_user', username=user.username))
        else:
            flash('Invalid password.')

    return render_template("auth/admin_user_change_username.html", title='Admin - Change Username', form=form)


@auth.route('/admin/users/<username>/change-username/<token>', methods=['GET', 'POST'])
@login_required
def admin_user_change_username_token(username, token):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    if user.change_username(token):
        flash('Your username has been updated.')
    else:
        flash('Invalid request.')
    return redirect(url_for('auth.admin_user', username=user.username))


@auth.route('/admin/users/<username>/delete', methods=['GET', 'POST'])
@login_required
def admin_user_delete(username):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    db.session.delete(user)
    db.session.commit()
    flash('The user has been deleted.')
    return redirect(url_for('auth.admin_user_list'))


@auth.route('/admin/users/<username>/delete/<token>', methods=['GET', 'POST'])
@login_required
def admin_user_delete_token(username, token):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    if user.delete_user(token):
        flash('The user has been deleted.')
    else:
        flash('Invalid request.')
    return redirect(url_for('auth.admin_user_list'))


@auth.route('/admin/users/<username>/reset', methods=['GET', 'POST'])
@login_required
def admin_user_reset(username):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    form = ResetPasswordForm()
    if form.validate_on_submit():
        user.password = form.password.data
        db.session.add(user)
        flash('Your password has been reset.')
        return redirect(url_for('auth.admin_user', username=user.username))
    return render_template("auth/admin_user_reset.html", title='Admin - Reset Password', form=form)


@auth.route('/admin/users/<username>/reset/<token>', methods=['GET', 'POST'])
@login_required
def admin_user_reset_token(username, token):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    if user.reset_password(token, form.password.data):
        flash('Your password has been reset.')
    else:
        flash('Invalid request.')
    return redirect(url_for('auth.admin_user', username=user.username))


@auth.route('/admin/users/<username>/change-password', methods=['GET', 'POST'])
@login_required
def admin_user_change_password(username):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    form = ChangePasswordForm()
    if form.validate_on_submit():
        if user.verify_password(form.old_password.data):
            user.password = form.password.data
            db.session.add(user)
            flash('Your password has been updated.')
            return redirect(url_for('auth.admin_user', username=user.username))
        else:
            flash('Invalid password.')
    return render_template("auth/admin_user_change_password.html", title='Admin - Change Password', form=form)


@auth.route('/admin/users/<username>/change-password/<token>', methods=['GET', 'POST'])
@login_required
def admin_user_change_password_token(username, token):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    if user.change_password(token, form.password.data):
        flash('Your password has been updated.')
    else:
        flash('Invalid request.')
    return redirect(url_for('auth.admin_user', username=user.username))


@auth.route('/admin/users/<username>/change-email', methods=['GET', 'POST'])
@login_required
def admin_user_change_email(username):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    form = ChangeEmailForm()
    if form.validate_on_submit():
        if user.verify_password(form.password.data):
            user.email = form.email.data
            db.session.add(user)
            flash('Your email has been updated.')
            return redirect(url_for('auth.admin_user', username=user.username))
        else:
            flash('Invalid email or password.')
    return render_template("auth/admin_user_change_email.html", title='Admin - Change Email', form=form)


@auth.route('/admin/users/<username>/change-email/<token>', methods=['GET', 'POST'])
@login_required
def admin_user_change_email_token(username, token):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    if user.change_email(token):
        flash('Your email has been updated.')
    else:
        flash('Invalid request.')
    return redirect(url_for('auth.admin_user', username=user.username))


@auth.route('/admin/users/<username>/change-password/<token>', methods=['GET', 'POST'])
@login_required
def admin_user_change_password_token(username, token):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    if user.change_password(token, form.password.data):
        flash('Your password has been updated.')
    else:
        flash('Invalid request.')
    return redirect(url_for('auth.admin_user', username=user.username))


@auth.route('/admin/users/<username>/delete', methods=['GET', 'POST'])
@login_required
def admin_user_delete(username):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    db.session.delete(user)
    db.session.commit()
    flash('The user has been deleted.')
    return redirect(url_for('auth.admin_user_list'))


@auth.route('/admin/users/<username>/delete/<token>', methods=['GET', 'POST'])
@login_required
def admin_user_delete_token(username, token):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    if user.delete_user(token):
        flash('The user has been deleted.')
    else:
        flash('Invalid request.')
    return redirect(url_for('auth.admin_user_list'))


@auth.route('/admin/users/<username>/change-email/<token>', methods=['GET', 'POST'])
@login_required
def admin_user_change_email_token(username, token):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
    if user.change_email(token):
        flash('Your email has been updated.')
    else:
        flash('Invalid request.')
    return redirect(url_for('auth.admin_user', username=user.username))

@auth.route('/admin/users/<username>/change-email/<token>', methods=['GET', 'POST'])
@login_required
def admin_user_change_email_token(username, token):
    if not current_user.is_admin:
        return redirect(url_for('core.index'))
    user = User.query.filter_by(username=username).first()
    if user is None:
        abort(404)
        